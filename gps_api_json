

#Область GPS_API

Функция Login() Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	
	ПараметрыЗапроса.Вставить("account", accountGPS());
	ПараметрыЗапроса.Вставить("password", passwordGPS());
	
	Результат = ОтправитьHTTPЗапрос(IpAddressGPS(), "StandardApiAction_login.action?", ПараметрыЗапроса);  	
	
	Если НЕ Результат Тогда
		Сообщить("Не удалось выполнить запрос");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // Login()
		
Функция GetUserVehicle() Экспорт
	
	Авторизация = Login();
	Jsession = ПолучитьJsession(Авторизация);
	
	ПараметрыЗапроса = Новый Структура;
	
	ПараметрыЗапроса.Вставить("jsession", Jsession);
	
	Результат = ОтправитьHTTPЗапрос(IpAddressGPS(), "StandardApiAction_queryUserVehicle.action?", ПараметрыЗапроса); 
	
	Если НЕ Результат Тогда
		Сообщить("Не удалось выполнить запрос");
		Возврат Ложь;
	КонецЕсли;
	
	ОтветСтруктура = ОбработатьJSON(Результат);
		
	Возврат ОтветСтруктура;

КонецФункции

Функция ПолучитьJsession(ОтветЛогина) Экспорт
	
	Ключ = Неопределено;
	
	Результат = ОбработатьJSON(ОтветЛогина);
	
	Если Не Результат.Успех Тогда
		ВызватьИсключение "Ошибка чтения json";
	КонецЕсли;
	
	Результат.РезультатЧтения.Свойство("jsession", Ключ);
	Если Не ЗначениеЗаполнено(Ключ) Тогда      
		ВызватьИсключение "Ошибка при получении ключа авторизации";
	КонецЕсли;
	
	Возврат Ключ;
	
КонецФункции	

#КонецОбласти


 #Область HTTPЗапрос

#Область Запрос

Функция ОтправитьHTTPЗапрос(адрес, метод, параметры_метода = Неопределено) Экспорт

	Результат = Неопределено;
	
	Попытка 
		//ssl = Новый ЗащищенноеСоединениеOpenSSL();
		
		СоединениеHTTP = Новый HTTPСоединение(адрес, 8088,,,,5);
		
		HTTPЗапрос = Новый HTTPЗапрос;
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json");
		HTTPЗапрос.АдресРесурса = СформироватьМетод(Метод, параметры_метода);
		
		РезультатЗапроса = СоединениеHTTP.Получить(HTTPЗапрос);

		Если РезультатЗапроса.КодСостояния = 200 Тогда
			Результат = РезультатЗапроса.ПолучитьТелоКакСтроку();
			РезультатСтруктура = ОбработатьJSON(Результат); 
		КонецЕсли;
		
	Исключение
		Сообщить("Не удалось установить соединение с сервером - ошибка: " + ОписаниеОшибки());
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;

КонецФункции // ОтправитьHTTPЗапрос()

#КонецОбласти    

#Область СлужебныеПроцедурыИФункции

Функция СформироватьМетод(НазваниеМетода, ПараметрыЗапроса = Неопределено)
	 
	Стр = НазваниеМетода;
	ПараметрыМетода = "";
	
	ПервыйПараметр = Истина;
	
	Если ПараметрыЗапроса = Неопределено Тогда
		 Возврат Стр;
	КонецЕсли;	 
	
	Для Каждого Параметр из ПараметрыЗапроса Цикл
		Если ПервыйПараметр Тогда
			Стр = Стр + Параметр.Ключ + "=" + Параметр.Значение;
			ПервыйПараметр = Ложь;
		Иначе
			Стр = Стр + "&" + Параметр.Ключ + "=" + Параметр.Значение;
		КонецЕсли;
	КонецЦикла;	
	 	
	Возврат Стр;
	
 КонецФункции // СформироватьМетод()
 
Функция СформироватьJSON(СтруктураДанных, ФормироватьСПереносами = Ложь) Экспорт
	 
	 ЗаписьJSON = Новый ЗаписьJSON;
	 Если ФормироватьСПереносами Тогда
		 ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	 Иначе 
		 ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, Символы.Таб));
	 КонецЕсли;
	 
	 НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	 НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
	 НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	 
	 ЗаписатьJSON(ЗаписьJSON, СтруктураДанных, НастройкиСериализацииJSON);
	 
	 Возврат ЗаписьJSON.Закрыть();
	 
КонецФункции

Функция ОбработатьJSON(СтрокаJSON) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	Попытка
		
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаJSON);
		
		СтруктураВозврата.Вставить("Успех", Истина);
		СтруктураВозврата.Вставить("РезультатЧтения", ПрочитатьJSON(Чтение));
	
	Исключение
		
		СтруктураВозврата.Вставить("Успех", Ложь); 
		
	КонецПопытки;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено,
   СокращатьНепечатаемыеСимволы = Ложь) Экспорт

   Если Разделитель = ","
       И ПропускатьПустыеСтроки = Неопределено
       И СокращатьНепечатаемыеСимволы Тогда

       Результат = СтрРазделить(Значение, ",", Ложь);
       Для Индекс = 0 По Результат.ВГраница() Цикл
           Результат[Индекс] = СокрЛП(Результат[Индекс])
       КонецЦикла;
       Возврат Результат;

   КонецЕсли;

   Результат = Новый Массив;

   // Для обеспечения обратной совместимости.
   Если ПропускатьПустыеСтроки = Неопределено Тогда
       ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
       Если ПустаяСтрока(Значение) Тогда
           Если Разделитель = " " Тогда
               Результат.Добавить("");
           КонецЕсли;
           Возврат Результат;
       КонецЕсли;
   КонецЕсли;
   //

   Позиция = СтрНайти(Значение, Разделитель);
   Пока Позиция > 0 Цикл
       Подстрока = Лев(Значение, Позиция - 1);
       Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
           Если СокращатьНепечатаемыеСимволы Тогда
               Результат.Добавить(СокрЛП(Подстрока));
           Иначе
               Результат.Добавить(Подстрока);
           КонецЕсли;
       КонецЕсли;
       Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
       Позиция = СтрНайти(Значение, Разделитель);
   КонецЦикла;

   Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
       Если СокращатьНепечатаемыеСимволы Тогда
           Результат.Добавить(СокрЛП(Значение));
       Иначе
           Результат.Добавить(Значение);
       КонецЕсли;
   КонецЕсли;

   Возврат Результат;

КонецФункции

Функция ФорматироватьСтроку(ТекущееЗначение) Экспорт
	Возврат Формат(ТекущееЗначение,"ЧРГ=''; ЧГ=0") 
КонецФункции // ФорматироватьСтроку()

#КонецОбласти 

#КонецОбласти

#Область Переменные

Функция accountGPS()

	Возврат "login";

КонецФункции // accountGPS()

Функция passwordGPS()

	Возврат "password";

КонецФункции // passwordGPS()

Функция IpAddressGPS()

	Возврат "localhost";

КонецФункции // IpAddressGPS()

#КонецОбласти          
